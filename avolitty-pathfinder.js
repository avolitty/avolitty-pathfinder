const _1_0 = function(_1_1) {
	let _1_2 = 0
	let _1_3 = 0

	while (_1_2 != 8) {
		_1_1[6][_1_2++] = _1_1[5][_1_3] / _1_1[1][0] | 0
		_1_1[6][_1_2++] = _1_1[5][_1_3] - (_1_1[5][_1_3++] / _1_1[1][1] | 0) * 10
	}

	_1_2 = 0
	_1_3 = 0
	let _1_4 = 0
	// directional logic before optimization

	while (_1_2 != 4) {
		_1_3 = 0 // directional key in _1_1[2]
		_1_4 = _1_1[6][_1_2] - _1_1[6][_1_2++ + 4]

		if (_1_4 < 0) {
			_1_3 += 4
		}

		if (_1_4 == 0) {
			_1_3--
		}

		_1_4 = _1_1[6][_1_2] - _1_1[6][_1_2++ + 4]

		if (_1_4 < 0) {
			_1_3 += 2
		}

		if (_1_4 == 0) {
			_1_3--
		}

		// ..
		console.log(_1_3 + " [+" + _1_1[2][_1_3] + "]")
	}

	// ..
	_1_1[8] = 1
	return _1_1
}

const avolittyPathfinder = function(_1_1) {
	let _1_2 = _1_1.grid
	let _1_3 = _1_1.height
	let _1_4 = _1_1.width
	let _1_5 = _1_3 * _1_4
	let _1_6 = [0, _1_4 * -1, 0, 1, 0, _1_4, 0, -1]
	let _1_7 = []
	let _1_8 = []
	let _1_9 = 0
	_1_6[0] = _1_6[1] - 1
	_1_6[2] = _1_6[1] + 1
	_1_6[4] = _1_6[5] - 1
	_1_6[6] = _1_6[5] + 1

	while (_1_5 != _1_9) {
		_1_8[_1_2[_1_9]] = _1_9++
	}

	if (_1_8[1] == _1_8[2]) {
		return _1_2
	}

/*
splitting src + dst
  _1_8
    [] grid
    [] h + w
    [] traversal direction increments
    [] src + dst
    [] src + dst h + w pos
    [] current src + dst based on obstacles
    [] nested split traversal coordinates
    [] split traversal lengths w/ nested key
    [] 1|0 dst reached to break recursion
*/

	_1_8 = [
		_1_2,
		[_1_3, _1_4],
		_1_6,
		[_1_8[1], _1_8[2]],
		[
			_1_8[1] / _1_3 | 0, // src h
			_1_8[1] - (_1_8[1] / _1_4 | 0) * 10, // src w
			_1_8[2] / _1_3 | 0, // dst h
			_1_8[2] - (_1_8[2] / _1_4 | 0) * 10 // dst w
		],
		[
			_1_8[1],
			_1_8[1],
			_1_8[2],
			_1_8[2]
		],
		[],
		[],
		0
	]

	while (_1_8[8] == 0) {
		_1_8 = _1_0(_1_8)
	}

	console.log(_1_8)
	// ..
	return _1_8[0]
}

// temporary data for development
let _0 = {
	"grid": [
	0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3, 3, 3, 3, 3, 3, 0, 0,
	0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
	0, 3, 0, 0, 0, 3, 0, 0, 0, 0,
	0, 3, 0, 0, 0, 3, 0, 0, 0, 0,
	0, 3, 0, 3, 0, 3, 0, 0, 0, 0,
	0, 0, 0, 3, 0, 3, 0, 0, 0, 0,
	0, 0, 0, 3, 0, 3, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3, 0, 0, 0, 2
	],
	"height": 10,
	"width": 10
}

_0 = avolittyPathfinder(_0)
